---
title: "In-class_Ex02"
date: "`r Sys.Date()`"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    toc-depth: 4
execute:
  eval: true
  echo: true
  warning: false
---

# Agenda:

Learn to use the following R-packages:

-   [arrow](https://arrow.apache.org/docs/r/): To handle database and data conversion

-   [lubridate](https://lubridate.tidyverse.org/): Designed to handle date and time

-   tidyverse

-   tmap

-   sf

Things that we are going to go through:

-   Import the data set

-   Converting sf timble data.frame

-   Visualising point symbol map

-   Importing Master Plan 2019 Planning Subzone Boundary

We need to load the R packages into the R environment

```{r}
pacman::p_load(arrow,lubridate, tidyverse,sf, tmap)
```

# Importing the Grab-Posisi Dataset

The code below is to read the parquet file. You may refer to the [Arrow documentation](https://arrow.apache.org/cookbook/r/reading-and-writing-data---single-files.html#read-a-parquet-file-from-s3).

```{r}

df <- read_parquet("../../data/Week1/GrabPosisi/part-00000-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet")
```

While checking through the data, we noticed that the pingtimestamp is not in date time format, therefore we need to change it to the right data format. The code below will overwrite the data with `df$pingtimestamp`.

POSIXct - timbler time format, this is the date time field.

```{r}

df$pingtimestamp <- as_datetime(df$pingtimestamp)
```

Now to save the reformatted df into a new rds file called part0.rds save the ouput into a sub folder

```{r}

write_rds(df, "../../data/Week2/rds/part0.rds")
```

# Extracting the trip location

Steps on extracting the trip location

-   Extract trip location

-   Derive three new columns for weekday, starting hour and day of the month

-   Name the output tibble data.frame origin_df

```{r}
origin_df <- df%>%
  group_by(trj_id) %>%
  arrange(pingtimestamp) %>%
  filter(row_number()==1) %>%
  mutate(weekday = wday(pingtimestamp,
                        label= TRUE,
                        abbr = TRUE),
         start_hr = factor(hour(pingtimestamp)),
         day = factor(mday(pingtimestamp)))

```

Explaining the code:

-   `arrange` sort the timestamp from the earliest time to the lowest time

-   `Filter` to find the origin of the place

-   `mday` is month of day using factor so that they become ordinal scale data, since the mday and hour would return the number

-   abbr is the abrivation, instead of getting "Monday", it would return "Mon"

-   `Label` so that it returns Monday instead 1

-   `wday` define workday

-   Currently we are using lubridate function

Code out: Extract the destination location.

```{r}
destination_df <- df%>%
  group_by(trj_id) %>%
  arrange(desc(pingtimestamp)) %>%
  filter(row_number()==1) %>%
  mutate(weekday = wday(pingtimestamp,
                        label= TRUE,
                        abbr = TRUE),
         end_hr = factor(hour(pingtimestamp)),
         day = factor(mday(pingtimestamp)))
```

Explanation of the code:

-   arrange is from [tidyverse dplyr](https://dplyr.tidyverse.org/reference/arrange.html), it helps to organise your function, it works the same as sort.


Writing a rds format to save this database timbler framework.

-   all the object classes that you created it is saved as native. 

-   When you save it into csv, all the structure are gone. The weekday will become 1,2,3,4,5,6,7

-   Note that when you type, you need to provide the extension.

```{r}
#| echo: false
#| eval: false
write_rds(origin_df,"../../data/Week2/rds/origin_df.rds")
write_rds(destination_df,"../../data/Week2/rds/destination_df.rds")
```

When you are coming back to do the project, you can access the rds via the code below:

```{r}
origin_df <- read_rds("../../data/Week2/rds/origin_df.rds")
destination_df <- read_rds("../../data/Week2/rds/destination_df.rds")
```


