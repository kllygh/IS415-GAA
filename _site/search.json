[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Data acquistion\nUnderstanding the different files\nSimple Feature Packages\nTidyverse Packages\nPlotting maps"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#installing-and-loading-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#installing-and-loading-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "Installing and Loading R packages",
    "text": "Installing and Loading R packages\nIn this section, I will install and load tidyverse and sf packages.\n\npacman::p_load(tidyverse, sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#importing-a-polygon-feature-data-in-shapefile-format.",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#importing-a-polygon-feature-data-in-shapefile-format.",
    "title": "Hands-on Exercise 1",
    "section": "Importing a polygon feature data in shapefile format.",
    "text": "Importing a polygon feature data in shapefile format.\n\nImporting MasterPlan data\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\",\n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\kllygh\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\nImporting Cycling Path data\n\ncyclingpath &lt;- st_read(dsn = \"data/geospatial\",\n                layer = \"CyclingPathGazette\"\n)\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\kllygh\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2558 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\n\nImporting GIS data in kml format\n\npreschool &lt;- st_read(dsn=\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\kllygh\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1",
    "section": "Plotting the geospatial data",
    "text": "Plotting the geospatial data\n\nplot(mpsz)\n\n\n\n\n\n\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\nCorrecting the coordinate system\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#transforming-the-projection-of-preschool-from-wgs84-to-svy21.",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#transforming-the-projection-of-preschool-from-wgs84-to-svy21.",
    "title": "Hands-on Exercise 1",
    "section": "Transforming the projection of preschool from wgs84 to svy21.",
    "text": "Transforming the projection of preschool from wgs84 to svy21.\n\npreschool3414 &lt;- st_transform(preschool, \n                              crs = 3414)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#importing-aspatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#importing-aspatial-data",
    "title": "Hands-on Exercise 1",
    "section": "Importing Aspatial data",
    "text": "Importing Aspatial data\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nlist(listings) \n\n[[1]]\n# A tibble: 3,457 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Villa in…  367042 Belinda   East Region         Tampines          1.35\n 2  71896 Home in …  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Home in …  367042 Belinda   East Region         Tampines          1.35\n 4 275343 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Home in …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 Rental u… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 369141 Place to… 1521514 Elizabeth Central Region      Newton            1.31\n# ℹ 3,447 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#buffering",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#buffering",
    "title": "Hands-on Exercise 1",
    "section": "Buffering",
    "text": "Buffering\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\nsum(buffer_cycling$AREA)\n\n1774367 [m^2]"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "Welcome to IS415 Geospatial Analytics Application.\nThis is the course website of course IS415 I study this term. You will find my course work on this website."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#esri-shapefile-format",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#esri-shapefile-format",
    "title": "Hands-on Exercise 1",
    "section": "ESRI Shapefile Format",
    "text": "ESRI Shapefile Format\nThe ESRI Shapefile format is a popular geospatial vector data format developed by ESRI (Environmental Systems Research Institute), a company that provides Geographic Information System (GIS) software and solutions. The shapefile format is widely used for storing and exchanging geospatial data, and it has become a de facto standard in the GIS community.\nUnderstanding components of ESRI Shapefile:\n\nGeometry Types:\n\nA shapefile can store different types of vector geometries, including points, lines (or polylines), and polygons. Each geometry type is associated with a set of coordinates that define the shape’s location and structure.\n\nAttribute Data:\n\nIn addition to the spatial information, shapefiles can contain attribute data associated with each spatial feature. This attribute data is typically stored in a separate database file (.dbf) and can include information such as names, IDs, or any other descriptive attributes for the features.\n\nMultiple Files:\n\nA complete shapefile dataset consists of several files with different extensions. The main files include: .shp: Contains the geometry information. .shx: Contains the shape index data. .dbf: Stores attribute data in a tabular format. .prj: Specifies the coordinate system and projection information. Other auxiliary files (.sbn, .sbx, .shp.xml, etc.) may also be present.\n\nProjection Information:\n\nThe shapefile format allows for the inclusion of projection information in the .prj file, specifying the coordinate system and projection used for the spatial data. This ensures that spatial features are correctly located on the Earth’s surface.\n\nCompatibility:\n\nShapefiles are widely supported by various GIS software packages, making them easy to share and exchange among different systems. Many GIS applications, including ESRI’s ArcGIS, QGIS, and others, can read and write shapefiles.\n\n\nTo work with shapefiles in R, you can use the sf package, as mentioned in a previous response. The sf package provides functions for reading, writing, and manipulating spatial data in the form of simple features, and it is compatible with the ESRI shapefile format."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#kml-file",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#kml-file",
    "title": "Hands-on Exercise 1",
    "section": "kml File",
    "text": "kml File\nA KML (Keyhole Markup Language) file is a type of XML (eXtensible Markup Language) file format used to express geographic annotation and visualization within three-dimensional Earth browsers. KML files are commonly associated with mapping applications, GIS (Geographic Information System) software, and online mapping services. The format was developed by Keyhole Inc., which was later acquired by Google.\nKey features of KML files include:\n\nGeospatial Information:\n\nKML files are used to represent geospatial data, including points, lines, polygons, and images, on the Earth’s surface. They can contain information such as coordinates, placemarks, paths, and 3D models.\n\nXML Structure:\n\nKML files are XML documents, meaning they use a hierarchical structure of tags to organize and describe geographic information. The XML format makes it human-readable and easy to parse by machines.\n\nPlacemarks and Features:\n\nKML files often include placemarks, which mark specific points on the Earth’s surface and may include additional information such as names, descriptions, and styles. Other features like paths and polygons are also commonly used to represent linear features or enclosed areas.\n\nStyling and Visualization:\n\nKML supports the styling of features, allowing users to define the appearance of points, lines, and polygons. This includes specifying colors, icons, labels, and other visual attributes.\n\nCompatibility:\n\nKML is widely supported by various mapping and GIS applications, including Google Earth, Google Maps, and many other GIS software packages. This makes it a common choice for sharing geographic data.\n\nExtension Support:\n\nKML supports extensions, allowing users to include additional custom data and attributes beyond the core KML specification. This flexibility makes it suitable for various applications and use cases. To view or interact with KML files, you can use tools like Google Earth, which provides a user-friendly interface for exploring geospatial data in a 3D environment. Many GIS software packages also support the import and export of KML files, allowing for integration into broader geospatial workflows.\n\n\nIn R, you can use packages like sf or plotKML to work with KML files and integrate them into your geospatial analyses and visualizations."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#p_load",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#p_load",
    "title": "Hands-on Exercise 1",
    "section": "p_load",
    "text": "p_load\nThe code below, shows how p_load helps to install and load sf and tidyverse pacages into R environment.\n\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#st_read",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#st_read",
    "title": "Hands-on Exercise 1",
    "section": "st_read",
    "text": "st_read\nUsage of st_read: To import geospatial data into R.\nThings to note: for st_read, you dont have to mention the filename extension\nImporting polygon feature data in Shapefile into R:\n\nmpsz = st_read(dsn = \"../../data/Week1/geospatial\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\kllygh\\IS415-GAA\\data\\Week1\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nImporting polyline feature data in shapefile form into R:\n\ncyclingpath = st_read(dsn = \"../../data/Week1/geospatial\", \n                         layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\kllygh\\IS415-GAA\\data\\Week1\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 2558 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nImporting GIS data from KML file into R:\n\npreschool = st_read(\"../../data/Week1/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\kllygh\\IS415-GAA\\data\\Week1\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#understanding-the-difference-between-esri-shapefile-and-kml",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#understanding-the-difference-between-esri-shapefile-and-kml",
    "title": "Hands-on Exercise 1",
    "section": "Understanding the difference between ESRI Shapefile and KML",
    "text": "Understanding the difference between ESRI Shapefile and KML\nKML (Keyhole Markup Language) and Shapefile are both file formats used for storing and exchanging geospatial data, but they have some key differences in terms of structure, capabilities, and use cases.\nHere’s a comparison between KML and Shapefile:\n\nFile Format and Structure:\n\nKML: KML is an XML-based file format. It uses tags and attributes to represent geographic features, attributes, and styling information. KML files are human-readable and can be easily edited with a text editor. They are well-suited for representing geographic data in a hierarchical and descriptive manner.\nShapefile: A Shapefile is a set of files with different extensions (.shp, .shx, .dbf, .prj, etc.) that collectively store both spatial and attribute data. The .shp file contains geometric data, while the .dbf file stores attribute data in a tabular format. The shapefile format is more structured and relies on binary files for geometry.\n\nGeometry Types:\n\nKML: Supports points, lines, polygons, 3D models, and other geometries. It is versatile and can represent both 2D and 3D spatial features.\nShapefile: Supports points, lines, and polygons, but does not inherently support 3D geometries. It’s primarily used for 2D vector data.\n\nAttributes and Database:\n\nKML: Attributes are included within the KML file itself, typically in a  element or as attributes of specific features. The structure is less rigid, and attributes can be added flexibly.\nShapefile: Attribute data is stored in a separate .dbf file. The tabular structure allows for a more organized representation of attribute information.\n\nStyling and Visualization:\n\nKML: Provides rich styling options, allowing users to define colors, icons, labels, and other visual attributes for individual features. Styling information is often embedded within the KML file.\nShapefile: Styling is typically handled by the GIS software reading the shapefile. The shapefile format itself does not store styling information.\n\nSoftware Compatibility:\n\nKML: Widely supported by various mapping and GIS applications, including Google Earth and Google Maps. Many GIS software packages can import and export KML files.\nShapefile: A widely supported format in the GIS community. Most GIS software, including ESRI’s ArcGIS, QGIS, and others, can read and write shapefiles.\n\nUse Cases:\n\nKML: Often used for visualizing and sharing geographic data on online platforms, virtual globes, and web mapping applications. Suitable for applications where human-readable representation is important.\nShapefile: Commonly used for more complex GIS workflows, analysis, and data storage. It is a well-established format in the GIS community and is suitable for a wide range of applications.\n\n\nUltimately, the choice between KML and Shapefile depends on the specific requirements of a given project and the tools and applications you plan to use. Each format has its strengths and is better suited to certain use cases."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#st_geometry",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#st_geometry",
    "title": "Hands-on Exercise 1",
    "section": "st_geometry()",
    "text": "st_geometry()\nUsage: This function is often used to retrieve the actual point, line, or polygon coordinates from a spatial dataset.\nIn the context of R programming and spatial data analysis, sf_object typically refers to an object created using the sf package, which is specifically designed for handling spatial data in the form of simple features. The sf package provides a framework for representing and manipulating spatial vector data.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#glimpse",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#glimpse",
    "title": "Hands-on Exercise 1",
    "section": "glimpse()",
    "text": "glimpse()\nUsage: glimpse() is a function provided by the dplyr package, which is part of the tidyverse collection of R packages. The glimpse() function is used for printing a concise summary of a data frame or tibble, including information about the data types of columns and a preview of the first few rows of the data.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#plotting-geospatial-maps",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#plotting-geospatial-maps",
    "title": "Hands-on Exercise 1",
    "section": "Plotting geospatial maps",
    "text": "Plotting geospatial maps\n\nplot(mpsz)\n\n\n\n\n\n\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#st_crs",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#st_crs",
    "title": "Hands-on Exercise 1",
    "section": "st_crs()",
    "text": "st_crs()\nUsage: This function is used to extract the CRS information from an sf object.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#projection-transformation",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#projection-transformation",
    "title": "Hands-on Exercise 1",
    "section": "Projection transformation",
    "text": "Projection transformation\nUsage: Projection transformation, often simply referred to as “projection,” is a process used in cartography (the study and practice of map-making) and Geographic Information Systems (GIS) to convert spatial data from one coordinate reference system to another. This transformation is necessary when data collected or represented in one coordinate system needs to be displayed or analyzed in a different coordinate system.\n\nst_crs()\nUsage: This function is used to extract the CRS information from an sf object.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\n\nst_set_crs()\nUsage: To assign the correct EPSG code to mpsz data frame, st_set_crs() of sf package is used as shown in the code chunk below. when you want to update the CRS metadata associated with an sf object without transforming the actual coordinates. This is useful when you know that the object is in a different CRS than the metadata suggests.\n\nYou use st_set_crs() when you want to assign or update the CRS of an sf object. This function does not perform any geometric transformation; it only updates the metadata associated with the object to indicate the new CRS.\n\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\n\n\nst_transform()\nUsage: when you want to transform the spatial coordinates of an sf object from one CRS to another. This is necessary when you have spatial data in one CRS, but you need to work with it in a different CRS.\n\nYou use st_transform() when you want to actually change the coordinates of the geometries to be consistent with a different CRS. This involves a mathematical transformation of the spatial features.\n\n\npreschool3414 &lt;- st_transform(preschool, \n                              crs = 3414)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#glimpse-dplyr-package",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#glimpse-dplyr-package",
    "title": "Hands-on Exercise 1",
    "section": "glimpse() dplyr package",
    "text": "glimpse() dplyr package\nUsage: glimpse() is a function provided by the dplyr package, which is part of the tidyverse collection of R packages. The glimpse() function is used for printing a concise summary of a data frame or tibble, including information about the data types of columns and a preview of the first few rows of the data.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#read_csv-from-readr-package",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#read_csv-from-readr-package",
    "title": "Hands-on Exercise 1",
    "section": "read_csv() from readr package",
    "text": "read_csv() from readr package\nUsage: primary purpose is to read tabular data from CSV (Comma-Separated Values) files. CSV files are a common format for storing tabular data, and they can be used for both spatial and non-spatial datasets.\nThings to note: When providing the path here, include the filename and the file extension.\n\nlistings &lt;- read_csv(\"../../data/Week1/aspatial/listings.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#list-of-base-r",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#list-of-base-r",
    "title": "Hands-on Exercise 1",
    "section": "list() of base R",
    "text": "list() of base R\nUsage: is a base R function used to create a list object. Lists in R can contain elements of different types, such as vectors, data frames, functions, or even other lists. It is a fundamental data structure in R for organizing and storing heterogeneous data.\n\nlist(listings) \n\n[[1]]\n# A tibble: 3,457 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Villa in…  367042 Belinda   East Region         Tampines          1.35\n 2  71896 Home in …  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Home in …  367042 Belinda   East Region         Tampines          1.35\n 4 275343 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Home in …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 Rental u… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 369141 Place to… 1521514 Elizabeth Central Region      Newton            1.31\n# ℹ 3,447 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\nWhen to use list() and glimpse()?\n\nUse glimpse() when you want to inspect the structure of a data frame or tibble.\nUse list() when you want to create a list to organize and store different types of elements."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "title": "Hands-on Exercise 1",
    "section": "Creating a simple feature data frame from an aspatial data frame",
    "text": "Creating a simple feature data frame from an aspatial data frame\n\nst_as_sf() sf package\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\nglimpse(listings_sf)\n\nRows: 3,457\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Villa in Singapore · ★4.44 · 2 bedroom…\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; 150, 80, 80, 64, 78, 220, 85, 75, 69, 7…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 92, 60, 60, 92,…\n$ number_of_reviews              &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 131, 17, 5, 81,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.13, 0.16, 0.30, 0.15, 0.11, 0.09, 0.9…\n$ calculated_host_listings_count &lt;dbl&gt; 5, 5, 5, 51, 51, 5, 7, 51, 51, 7, 7, 1,…\n$ availability_365               &lt;dbl&gt; 55, 91, 91, 183, 183, 54, 365, 183, 183…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 3, 0, 0, 1, 2, 0, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#buffer",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#buffer",
    "title": "Hands-on Exercise 1",
    "section": "Buffer",
    "text": "Buffer\nDefinition: A buffer in GIS is a defined zone or area created around or within a geographic feature such as a point, line, or polygon.\nWhy do we use buffer?\n\nBuffers help answer questions like “What are the features within a certain distance from a given point?”\n“How many road segments intersect a specific buffer zone?”\nBuffering can also be used to identify if a geographic feature is found within proximity to another geographic feature\na business may use buffering along with census data to see the demographics of customers that live within a certain distance of their store.\n\n\nst_buffer()\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\n\n\nst_area()\nExplanation of the code below: This code is using the sf (Simple Features) package in R to calculate and add a new column named AREA to a spatial object named buffer_cycling. The AREA column will store the calculated areas of each geometry in the buffer_cycling object.\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\n\n\nsum()\nTo calculate the total land involved\n\nsum(buffer_cycling$AREA)\n\n1774367 [m^2]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#point-in-polygon-count",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#point-in-polygon-count",
    "title": "Hands-on Exercise 1",
    "section": "Point-in-polygon count",
    "text": "Point-in-polygon count\n\nExample 1\n\nlength() and st_intersects()\nst_intersects(x, y, sparse = FALSE, …) && intersects_result &lt;- st_intersects(points, polygon)\n\nx and y: The sf objects for which intersection is being tested. These can be simple features (points, lines, polygons, etc.) or geometries.\nsparse: A logical parameter indicating whether to use a sparse matrix representation for the result. If sparse is set to TRUE, the result will be a sparse matrix.\n\n\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))\n\n\n\nSummary()\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\n\n\ntop_n()\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\n\n\n\nExample 2\n\nst_area() and mutate()\nThings to note:\n\nmpsz3414 %&gt;% st_area() is equivalent to st_area(mpsz3414).\n\nExplanation of the code:\n\nmutate(): This function is from the dplyr package and is used for creating or modifying columns in a data frame. It allows you to add new columns or modify existing ones based on specified calculations.\nmpsz3414 %&gt;% ...: The pipe operator (%&gt;%) is used to pass the mpsz3414 data frame to the subsequent mutate() function. This creates a readable and sequential flow of operations.\ndf &lt;- df %&gt;% mutate(Doubled = Value * 2)\n\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex2.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex2.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "Understanding the difference between classified and unclassified chloropleth maps:\n\nClassified Choropleth Map:\n\nUse Case: Classified choropleth maps are more common and appropriate when you want to highlight patterns, trends, or variations in the data across different classes or ranges.\nData Characteristics: If your data naturally falls into distinct categories or classes, such as income brackets, population density ranges, or temperature zones, a classified choropleth map is suitable.\nCommunication of Patterns: This type of map is effective in communicating the relative differences and relationships between geographic regions within each class.\nExample: Showing different income levels across regions, where each class represents a specific income range, and different colors represent different classes.\n\nUnclassified Choropleth Map:\n\nUse Case: Unclassified choropleth maps are used when the emphasis is on the overall distribution of the data rather than specific classes. It is also known as a continuous or graduated choropleth map.\nData Characteristics: If your data is more continuous and doesn’t naturally fall into distinct classes, such as temperature gradients or precipitation levels, an unclassified choropleth map is more appropriate.\nCommunication of Gradations: This type of map is suitable when you want to communicate the gradual change or intensity of a variable across regions without categorizing them into specific classes.\nExample: Showing a gradient of population density across regions without predefined categories; the map could represent a smooth transition from low to high density.\n\n\nUnderstanding how data distribution affects choosing classes for a choropleth map:\nThe of the distribution influences the effectiveness of each classification method. Understanding whether your data is skewed, evenly distributed, has natural breaks, or follows a particular pattern helps you choose the most appropriate classification method for creating a choropleth map that accurately represents the underlying spatial patterns in your data. Choosing the right classification method enhances the map’s interpretability and ensures that the representation aligns with the characteristics of the data you are visualizing.\n\nQuantiles:\n\nImportance of Distribution: Quantiles divide the data into equal-sized groups, which is especially useful when dealing with data that may have skewed distributions or outliers. Quantiles are less sensitive to extreme values.\nUse Case: Effective for data with varying levels of intensity, where you want to ensure that each category represents an equal proportion of the total observations.\n\nEqual Interval:\n\nImportance of Distribution: Equal interval classification divides the range of values into equal intervals. This method is suitable when the data exhibits a fairly uniform distribution.\nUse Case: Works well for data with a linear distribution, where equal intervals provide a simple and easy-to-understand representation.\n\nNatural Breaks (Jenks):\n\nImportance of Distribution: Natural breaks aim to identify natural groupings or clusters in the data. It is useful when the data has distinct breaks or modes.\nUse Case: Effective for data with clear breaks or patterns, helping to emphasize differences between groups.\n\nStandard Deviation:\n\nImportance of Distribution: Standard deviation classification is suitable for data with a normal distribution. It places values into classes based on the standard deviation from the mean.\nUse Case: Appropriate for normally distributed data, where you want to highlight variations from the average.\n\nDefined Interval:\n\nImportance of Distribution: Defined interval classification allows you to specify custom class intervals. It is flexible and can be adapted to the specific characteristics of your data.\nUse Case: Useful when you have prior knowledge or specific criteria for defining meaningful intervals in your data.\n\n\nAn overview of all the mapping packages in R\n\ntmap:\n\nPurpose: tmap is a package for creating thematic maps in R. It provides a framework for easily creating static and interactive maps with a focus on simplicity and flexibility. It allows users to create map visualizations with various map types, legends, and thematic mapping techniques.\n\nmapsf:\n\nPurpose: mapsf is another R package for creating thematic maps. It builds on the simplicity of the sf package for handling spatial data and aims to provide an easy-to-use interface for producing high-quality maps.\n\nleaflet:\n\nPurpose: leaflet is an R package that interfaces with the JavaScript library Leaflet for creating interactive maps. It is particularly useful for web-based mapping applications and provides a simple way to add interactive features like zooming, panning, and pop-ups.\n\nggplot2:\n\nPurpose: ggplot2 is a powerful and versatile package for creating static graphics in R. While not specifically designed for maps, it can be used for creating static choropleth maps and other types of visualizations. When combined with spatial data, it allows for sophisticated data visualization.\n\nggmap:\n\nPurpose: ggmap is an extension of ggplot2 that facilitates the integration of static maps from Google Maps, OpenStreetMap, or other mapping providers into your ggplot2 visualizations. It is useful for creating data visualizations that incorporate a background map.\n\nquickmapr:\n\nPurpose: quickmapr is a package designed for the quick and easy visualization of spatial data, including shapefiles and raster data. It provides functions to load, plot, and analyze spatial data in a straightforward manner.\n\nmapview:\n\nPurpose: mapview is an R package that provides an interactive viewing environment for spatial data. It allows users to explore spatial datasets with an interactive map viewer, making it easier to inspect and analyze the data.\n\nRColorBrewer:\n\nPurpose: RColorBrewer is not a mapping package per se, but it is a package that provides color palettes suitable for thematic mapping. It is often used in conjunction with other mapping packages to enhance the visual appeal and interpretability of maps.\n\nclassInt:\n\nPurpose: classInt is a package that provides functions for choosing class intervals for choropleth maps. It offers different methods for classifying numerical data into meaningful intervals, such as quantiles, equal intervals, and more.\n\n\nThese packages cover a range of functionalities, from creating static and interactive maps to handling spatial data, adding background maps, and choosing appropriate color schemes for thematic mapping. The choice of a specific package often depends on the specific requirements of your mapping task and the features you need in your visualization."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex2.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex2.html#importing-the-data",
    "title": "Hands-on Exercise 2",
    "section": "Importing the data",
    "text": "Importing the data\nGeospatial data: Shapefile or KML file\n\nmpz &lt;- st_read(dsn = \"../../data/Week2/geospatial\",\n               layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\kllygh\\IS415-GAA\\data\\Week2\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nmpz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\nhead(mpz,n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\ntail(mpz,n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 20329.95 ymin: 42445.28 xmax: 38889.96 ymax: 50256.33\nProjected CRS: SVY21\n    OBJECTID SUBZONE_NO         SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N\n319      319          7      CONEY ISLAND    PGSZ07      N    PUNGGOL\n320      320          9       NORTH COAST    WDSZ09      N  WOODLANDS\n321      321          6 SEMBAWANG STRAITS    SBSZ06      N  SEMBAWANG\n322      322          7       THE WHARVES    SBSZ07      N  SEMBAWANG\n323      323          8      SENOKO NORTH    SBSZ08      N  SEMBAWANG\n    PLN_AREA_C          REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n319         PG NORTH-EAST REGION      NER 8B13A48924BBE015 2014-12-05 37928.50\n320         WD      NORTH REGION       NR 898B2436858382A1 2014-12-05 22147.04\n321         SB      NORTH REGION       NR AA1A638CA2B0D5B7 2014-12-05 28352.48\n322         SB      NORTH REGION       NR 6D89875A351CF51C 2014-12-05 26945.07\n323         SB      NORTH REGION       NR A800CBEE879C1BF9 2014-12-05 24665.79\n      Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n319 43351.37   5670.137    1200805 MULTIPOLYGON (((38738.41 42...\n320 48031.55  10847.882    2450784 MULTIPOLYGON (((21693.06 48...\n321 48918.27   7217.388    1540734 MULTIPOLYGON (((29302.17 48...\n322 49552.79  11828.878    1635808 MULTIPOLYGON (((26219.89 50...\n323 49482.60   7392.129    2241387 MULTIPOLYGON (((26047.11 50...\n\n\nAspatial data: read_csv()\n\npopdata &lt;- read_csv(\"../../data/Week2/aspatial/respopagesextod2011to2020.csv\")\npopdata\n\n# A tibble: 984,656 × 7\n   PA         SZ                     AG     Sex     TOD                Pop  Time\n   &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;            &lt;dbl&gt; &lt;dbl&gt;\n 1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 1- and 2-Ro…     0  2011\n 2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 3-Room Flats    10  2011\n 3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 4-Room Flats    30  2011\n 4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 5-Room and …    50  2011\n 5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HUDC Flats (exc…     0  2011\n 6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Landed Properti…     0  2011\n 7 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Condominiums an…    40  2011\n 8 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Others               0  2011\n 9 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Females HDB 1- and 2-Ro…     0  2011\n10 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Females HDB 3-Room Flats    10  2011\n# ℹ 984,646 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex2.html#data-wrangling-functions-used",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex2.html#data-wrangling-functions-used",
    "title": "Hands-on Exercise 2",
    "section": "Data Wrangling functions used",
    "text": "Data Wrangling functions used\nDefinition of data wrangling: Data wrangling, also known as data munging or data preprocessing, refers to the process of cleaning, structuring, and transforming raw data into a format that is suitable for analysis or other downstream tasks.\n\nSome functions that we will be using this week & a quick dive into them:\n\npivot_wider()\n\npivot_wider() is used to reshape data from long to wide format.\n\n\nmutate()\n\nmutate() This function is used to add new variables or modify existing ones in a data frame\n\n\nfilter()\n\nfilter() This function is used to subset data based on conditions.\n\n\ngroup_by()\n\ngroup_by() This function is used to group data by one or more variables. It is often used in combination with functions like summarize().\n\n\nselect()\n\nselect() This function is used to select specific columns from a data frame.\n\n\n\n\n\nPutting all the function together, an example of data wrangling:\nExplanation of the code:\n\nFiltering Data for the Year 2020: filter(Time == 2020): This line filters the dataset popdata to include only rows where the column Time has a value of 2020.\nGrouping and Summarizing Data: group_by(PA, SZ, AG) %&gt;% summarise(POP = sum(Pop)): It groups the filtered data by the columns PA, SZ, and AG, and then calculates the sum of the Pop column for each group, creating a new column named POP with the summarized population.\nUngrouping Data: ungroup(): This ungroups the data, removing the grouping structure. It is often used after summarizing grouped data.\nPivoting Data from Long to Wide Format: pivot_wider(names_from=AG, values_from=POP): It pivots the data from long to wide format, creating separate columns for each unique value in the AG column (assuming AG represents different age groups).\nCalculating Additional Variables:\n\nmutate(YOUNG = rowSums(.[3:6]) + rowSums(.[12])): It calculates a new variable YOUNG by summing the values in columns 3 to 6 and column 12.\nmutate(ECONOMY ACTIVE = rowSums(.[7:11]) + rowSums(.[13:15])): It calculates a new variable ECONOMY ACTIVE by summing the values in columns 7 to 11 and columns 13 to 15.\nmutate(AGED=rowSums(.[16:21])): It calculates a new variable AGED by summing the values in columns 16 to 21.\nmutate(TOTAL=rowSums(.[3:21])): It calculates a new variable TOTAL by summing the values in columns 3 to 21.\nmutate(DEPENDENCY = (YOUNG+AGED) / ECONOMY ACTIVE): It calculates a new variable DEPENDENCY by dividing the sum of YOUNG and AGED by ECONOMY ACTIVE.\n\nSelecting Specific Columns:\n\nselect(PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY): It selects specific columns (PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY) from the dataset to include in the final popdata2020 dataset.\n\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\npopdata2020\n\n# A tibble: 332 × 7\n   PA         SZ                   YOUNG `ECONOMY ACTIVE`  AGED TOTAL DEPENDENCY\n   &lt;chr&gt;      &lt;chr&gt;                &lt;dbl&gt;            &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n 1 Ang Mo Kio Ang Mo Kio Town Cen…  1440             2610   760  4810      0.843\n 2 Ang Mo Kio Cheng San             6640            15460  6050 28150      0.821\n 3 Ang Mo Kio Chong Boon            6150            13950  6470 26570      0.905\n 4 Ang Mo Kio Kebun Bahru           5540            12090  5120 22750      0.882\n 5 Ang Mo Kio Sembawang Hills       2100             3410  1310  6820      1    \n 6 Ang Mo Kio Shangri-La            3960             8420  3610 15990      0.899\n 7 Ang Mo Kio Tagore                2220             4200  1530  7950      0.893\n 8 Ang Mo Kio Townsville            4690            11450  5100 21240      0.855\n 9 Ang Mo Kio Yio Chu Kang             0                0     0     0    NaN    \n10 Ang Mo Kio Yio Chu Kang East     1220             2300   750  4270      0.857\n# ℹ 322 more rows\n\n\n\n\nJoining the attribute data and geospatial data\nThings to note:\n\nChanging values to uppercase is a common practice in data preparation when you anticipate performing string-based operations, comparisons, or joins. In the context of georelational joins or any join operation, ensuring consistent case (uppercase or lowercase) in the joining fields is crucial for accurate and successful matches\n\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nThen we will combine them together with left join\n\nUsing a left join in this context implies that you want to retain all the rows from the left data frame (mpsz) in the result, regardless of whether there is a matching row in the right data frame (popdata2020). If there is a match, the corresponding values from the right data frame will be included; otherwise, the columns from the right data frame will have NA values.\n\n\nmpsz_pop2020 &lt;- left_join(mpz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\n\nSaving R object into rds file\nwrite_rds(): This is a function in R that is part of the readr package. It is used to write an R object to an RDS file.\n\nwrite_rds(mpsz_pop2020, \"../../data/Week2/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex2.html#chloropleth-mapping",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex2.html#chloropleth-mapping",
    "title": "Hands-on Exercise 2",
    "section": "Chloropleth mapping",
    "text": "Chloropleth mapping\n\nqtm()\nExplanation of code:\n\nqtm(): This function stands for “Quick thematic map.” It is a simple way to create a choropleth map using tmap.\ntmap_mode(): There are a few modes\n\nview: Interactive mode\nplot: static viewing mode\nwindow: Graph will be opened on another window\n\nmpsz_pop2020: This is the data frame used for creating the map.\nfill = \"DEPENDENCY\": This specifies the variable to use for filling the map polygons. In this case, the color of each polygon will be determined by the values in the “DEPENDENCY” column of the mpsz_pop2020 data frame.\n\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\nTo make it on view mode\n\ntmap_options(check.and.fix = TRUE) before creating the map to enable automatic checking and fixing of the shapefile:\n\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"view\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\nChloropleth map with map elements\nExplanation of the code:\n\ntm_shape(mpsz_pop2020): tm_shape() is a function that defines the geographical data to be used for mapping. Here, it specifies the mpsz_pop2020 data frame as the source for the map.\ntm_fill(\"DEPENDENCY\", style = \"quantile\", palette = \"Blues\", title = \"Dependency ratio\"): tm_fill() is used to specify how the polygons should be filled based on a specific variable.\n\nIn this case, it fills the polygons based on the “DEPENDENCY” column of mpsz_pop2020.\nstyle = “quantile” specifies the coloring style as quantile.\npalette = “Blues” defines the color palette to be used (Blues).\ntitle = “Dependency ratio” sets the legend title.\n\ntm_layout(...): tm_layout() is used to customize the layout and appearance of the map.\n\nmain.title specifies the main title of the map. main.title.position sets the position of the main title (“center” in this case).\nmain.title.size adjusts the font size of the main title. legend.height and legend.width control the size of the legend. frame = TRUE adds a frame around the map.\n\ntm_borders(alpha = 0.5): tm_borders() adds borders to the map, and alpha = 0.5 sets the transparency level of the borders.\ntm_compass(type = \"8star\", size = 2): tm_compass() adds a compass to the map. type = “8star” specifies the type of compass (8-point star). size = 2 sets the size of the compass.\ntm_scale_bar(): tm_scale_bar() adds a scale bar to the map.\ntm_grid(alpha = 0.2): tm_grid() adds a grid to the map. alpha = 0.2 sets the transparency level of the grid.\ntm_credits(...): tm_credits() adds credits or a data source attribution to the map. The text provided in the argument specifies the source of the masp data.\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\nWhen to use tm_polygon() and when to use tm_fill(): - tm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\n\nUse tm_polygons() When:\n\nYou want to customize general polygon properties, such as borders, labels, or text, without focusing on fill color based on a variable.\n\nUse tm_fill() When:\n\nYou specifically want to customize how the interior of the polygons should be colored based on a variable. It is useful for creating choropleth maps where color represents the values of a particular variable.\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\nViewing how tm_fill() and tm_borders() works:\n\nlwd sets the line width of the borders. The default is 1.\nalpha sets the transparency level of the borders\ncol sets the border colour\nlty sets the border line type. The default is “solid”.\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd=1.4, alpha=0.2) +\n  tmap_mode(\"plot\")\n\n\n\n\n\n\n\n\n\n\nCustomising the classes\nImportant to note:\n\nUsually we will ensure to compute and display the descriptive statistics\n\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nIn R, the $ symbol is used for extracting a specific variable from a data frame. It is called the “dollar sign operator” and is used to access columns or variables within a data frame.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n\nMap legend\nExplanation of the code:\n\ntm_fill(\"DEPENDENCY\", style = \"jenks\", palette = \"Blues\" legend.hist = TRUE, legend.is.portrait = TRUE, legend.hist.z = 0.1):\n\ntm_fill() is used to fill the polygons on the map based on a specific variable (“DEPENDENCY”).\nstyle = \"jenks\" sets the classification method to Jenks natural breaks.\npalette = \"Blues\" defines the color palette to be used.\nlegend.hist = TRUE adds a histogram to the legend.\nlegend.is.portrait = TRUE arranges the legend in portrait mode.\nlegend.hist.z = 0.1 sets the transparency of the histogram in the legend.\n\ntm_layout(main.title = ..., main.title.position = ..., main.title.size = ..., legend.height = ..., legend.width = ..., legend.outside = ..., legend.position = ..., frame = ...):\n\ntm_layout() is used to customize the layout and appearance of the map.\nmain.title sets the main title of the map.\nmain.title.position sets the position of the main title.\nmain.title.size adjusts the font size of the main title.\nlegend.height and legend.width control the size of the legend.\nlegend.outside determines whether the legend is placed outside the map.\nlegend.position sets the position of the legend.\nframe controls whether a frame is added around the map.\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex2.html#drawing-small-multiple-choropleth-maps",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex2.html#drawing-small-multiple-choropleth-maps",
    "title": "Hands-on Exercise 2",
    "section": "Drawing Small Multiple Choropleth Maps",
    "text": "Drawing Small Multiple Choropleth Maps\nThe example below shows multiple choropleth maps via aesthetic arguments\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\nThe example below shows mutliple choropleth maps via tm_facets()\nExplanation of the code below:\n\nthres.poly = 0 sets a threshold for polygon size, indicating that polygons with an area below this threshold should not be filled.\nfree.coords = TRUE allows the facets to have different coordinate systems. When you set free.coords = TRUE in the tm_facets() function (as in your code snippet), it allows facets to have different coordinate systems. However, this is generally not recommended unless you have a specific reason for doing so. Using different coordinate systems can distort the spatial representation, making it challenging for viewers to accurately compare the facets.\ndrop.shapes = TRUE drops facets with no data.\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThis is an example of creating multiple choropleths map via tmap_arrange()\nExplanation of the code:\n\nasp = 1 ensures that the aspect ratio of the individual maps is preserved.\nncol = 2 specifies that the arrangement should have 2 columns, meaning the maps will be displayed side by side.\n\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\ntmap_arrange(youngmap, agedmap, asp = 1, nrow = 2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "href": "In-class_Ex/In-class_Ex02/In-class_Ex02.html",
    "title": "In-class_Ex02",
    "section": "",
    "text": "Agenda:\nLearn to use the following R-packages:\n\narrow: To handle database and data conversion\nlubridate: Designed to handle date and time\ntidyverse\ntmap\nsf\n\nThings that we are going to go through:\n\nImport the data set\nConverting sf timble data.frame\nVisualising point symbol map\nImporting Master Plan 2019 Planning Subzone Boundary\n\nWe need to load the R packages into the R environment\n\n\nShow the code\npacman::p_load(arrow,lubridate, tidyverse,sf, tmap)\n\n\n\n\nImporting the Grab-Posisi Dataset\nThe code below is to read the parquet file. You may refer to the Arrow documentation.\n\n\nShow the code\ndf &lt;- read_parquet(\"../../data/Week1/GrabPosisi/part-00000-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\")\n\n\nWhile checking through the data, we noticed that the pingtimestamp is not in date time format, therefore we need to change it to the right data format. The code below will overwrite the data with df$pingtimestamp.\nPOSIXct - timbler time format, this is the date time field.\n\n\nShow the code\ndf$pingtimestamp &lt;- as_datetime(df$pingtimestamp)\n\n\nNow to save the reformatted df into a new rds file called part0.rds save the ouput into a sub folder\n\n\nShow the code\nwrite_rds(df, \"../../data/Week2/rds/part0.rds\")\n\n\n\n\nExtracting the trip location\nSteps on extracting the trip location\n\nExtract trip location\nDerive three new columns for weekday, starting hour and day of the month\nName the output tibble data.frame origin_df\n\n\n\nShow the code\norigin_df &lt;- df%&gt;%\n  group_by(trj_id) %&gt;%\n  arrange(pingtimestamp) %&gt;%\n  filter(row_number()==1) %&gt;%\n  mutate(weekday = wday(pingtimestamp,\n                        label= TRUE,\n                        abbr = TRUE),\n         start_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n\n\nExplaining the code:\n\narrange sort the timestamp from the earliest time to the lowest time\nFilter to find the origin of the place\nmday is month of day using factor so that they become ordinal scale data, since the mday and hour would return the number\nabbr is the abrivation, instead of getting “Monday”, it would return “Mon”\nLabel so that it returns Monday instead 1\nwday define workday\nCurrently we are using lubridate function\n\nCode out: Extract the destination location.\n\n\nShow the code\ndestination_df &lt;- df%&gt;%\n  group_by(trj_id) %&gt;%\n  arrange(desc(pingtimestamp)) %&gt;%\n  filter(row_number()==1) %&gt;%\n  mutate(weekday = wday(pingtimestamp,\n                        label= TRUE,\n                        abbr = TRUE),\n         end_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n\n\nExplanation of the code:\n\narrange is from tidyverse dplyr, it helps to organise your function, it works the same as sort.\n\nWriting a rds format to save this database timbler framework.\n\nall the object classes that you created it is saved as native.\nWhen you save it into csv, all the structure are gone. The weekday will become 1,2,3,4,5,6,7\nNote that when you type, you need to provide the extension.\n\nWhen you are coming back to do the project, you can access the rds via the code below:\n\n\nShow the code\norigin_df &lt;- read_rds(\"../../data/Week2/rds/origin_df.rds\")\ndestination_df &lt;- read_rds(\"../../data/Week2/rds/destination_df.rds\")"
  }
]