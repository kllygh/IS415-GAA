[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "Data acquistion\nUnderstanding the different files\nSimple Feature Packages\nTidyverse Packages\nPlotting maps"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#installing-and-loading-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#installing-and-loading-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "Installing and Loading R packages",
    "text": "Installing and Loading R packages\nIn this section, I will install and load tidyverse and sf packages.\n\npacman::p_load(tidyverse, sf)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#importing-a-polygon-feature-data-in-shapefile-format.",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#importing-a-polygon-feature-data-in-shapefile-format.",
    "title": "Hands-on Exercise 1",
    "section": "Importing a polygon feature data in shapefile format.",
    "text": "Importing a polygon feature data in shapefile format.\n\nImporting MasterPlan data\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\",\n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\kllygh\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\nImporting Cycling Path data\n\ncyclingpath &lt;- st_read(dsn = \"data/geospatial\",\n                layer = \"CyclingPathGazette\"\n)\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\kllygh\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2558 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\n\nImporting GIS data in kml format\n\npreschool &lt;- st_read(dsn=\"data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\kllygh\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1",
    "section": "Plotting the geospatial data",
    "text": "Plotting the geospatial data\n\nplot(mpsz)\n\n\n\n\n\n\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\nCorrecting the coordinate system\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#transforming-the-projection-of-preschool-from-wgs84-to-svy21.",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#transforming-the-projection-of-preschool-from-wgs84-to-svy21.",
    "title": "Hands-on Exercise 1",
    "section": "Transforming the projection of preschool from wgs84 to svy21.",
    "text": "Transforming the projection of preschool from wgs84 to svy21.\n\npreschool3414 &lt;- st_transform(preschool, \n                              crs = 3414)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#importing-aspatial-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#importing-aspatial-data",
    "title": "Hands-on Exercise 1",
    "section": "Importing Aspatial data",
    "text": "Importing Aspatial data\n\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\nlist(listings) \n\n[[1]]\n# A tibble: 3,457 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Villa in…  367042 Belinda   East Region         Tampines          1.35\n 2  71896 Home in …  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Home in …  367042 Belinda   East Region         Tampines          1.35\n 4 275343 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Home in …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 Rental u… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 369141 Place to… 1521514 Elizabeth Central Region      Newton            1.31\n# ℹ 3,447 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#buffering",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#buffering",
    "title": "Hands-on Exercise 1",
    "section": "Buffering",
    "text": "Buffering\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\nsum(buffer_cycling$AREA)\n\n1774367 [m^2]"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415-GAA",
    "section": "",
    "text": "Welcome to IS415 Geospatial Analytics Application.\nThis is the course website of course IS415 I study this term. You will find my course work on this website."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#esri-shapefile-format",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#esri-shapefile-format",
    "title": "Hands-on Exercise 1",
    "section": "ESRI Shapefile Format",
    "text": "ESRI Shapefile Format\nThe ESRI Shapefile format is a popular geospatial vector data format developed by ESRI (Environmental Systems Research Institute), a company that provides Geographic Information System (GIS) software and solutions. The shapefile format is widely used for storing and exchanging geospatial data, and it has become a de facto standard in the GIS community.\nUnderstanding components of ESRI Shapefile:\n\nGeometry Types:\n\nA shapefile can store different types of vector geometries, including points, lines (or polylines), and polygons. Each geometry type is associated with a set of coordinates that define the shape’s location and structure.\n\nAttribute Data:\n\nIn addition to the spatial information, shapefiles can contain attribute data associated with each spatial feature. This attribute data is typically stored in a separate database file (.dbf) and can include information such as names, IDs, or any other descriptive attributes for the features.\n\nMultiple Files:\n\nA complete shapefile dataset consists of several files with different extensions. The main files include: .shp: Contains the geometry information. .shx: Contains the shape index data. .dbf: Stores attribute data in a tabular format. .prj: Specifies the coordinate system and projection information. Other auxiliary files (.sbn, .sbx, .shp.xml, etc.) may also be present.\n\nProjection Information:\n\nThe shapefile format allows for the inclusion of projection information in the .prj file, specifying the coordinate system and projection used for the spatial data. This ensures that spatial features are correctly located on the Earth’s surface.\n\nCompatibility:\n\nShapefiles are widely supported by various GIS software packages, making them easy to share and exchange among different systems. Many GIS applications, including ESRI’s ArcGIS, QGIS, and others, can read and write shapefiles.\n\n\nTo work with shapefiles in R, you can use the sf package, as mentioned in a previous response. The sf package provides functions for reading, writing, and manipulating spatial data in the form of simple features, and it is compatible with the ESRI shapefile format."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#kml-file",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#kml-file",
    "title": "Hands-on Exercise 1",
    "section": "kml File",
    "text": "kml File\nA KML (Keyhole Markup Language) file is a type of XML (eXtensible Markup Language) file format used to express geographic annotation and visualization within three-dimensional Earth browsers. KML files are commonly associated with mapping applications, GIS (Geographic Information System) software, and online mapping services. The format was developed by Keyhole Inc., which was later acquired by Google.\nKey features of KML files include:\n\nGeospatial Information:\n\nKML files are used to represent geospatial data, including points, lines, polygons, and images, on the Earth’s surface. They can contain information such as coordinates, placemarks, paths, and 3D models.\n\nXML Structure:\n\nKML files are XML documents, meaning they use a hierarchical structure of tags to organize and describe geographic information. The XML format makes it human-readable and easy to parse by machines.\n\nPlacemarks and Features:\n\nKML files often include placemarks, which mark specific points on the Earth’s surface and may include additional information such as names, descriptions, and styles. Other features like paths and polygons are also commonly used to represent linear features or enclosed areas.\n\nStyling and Visualization:\n\nKML supports the styling of features, allowing users to define the appearance of points, lines, and polygons. This includes specifying colors, icons, labels, and other visual attributes.\n\nCompatibility:\n\nKML is widely supported by various mapping and GIS applications, including Google Earth, Google Maps, and many other GIS software packages. This makes it a common choice for sharing geographic data.\n\nExtension Support:\n\nKML supports extensions, allowing users to include additional custom data and attributes beyond the core KML specification. This flexibility makes it suitable for various applications and use cases. To view or interact with KML files, you can use tools like Google Earth, which provides a user-friendly interface for exploring geospatial data in a 3D environment. Many GIS software packages also support the import and export of KML files, allowing for integration into broader geospatial workflows.\n\n\nIn R, you can use packages like sf or plotKML to work with KML files and integrate them into your geospatial analyses and visualizations."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#p_load",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#p_load",
    "title": "Hands-on Exercise 1",
    "section": "p_load",
    "text": "p_load\nThe code below, shows how p_load helps to install and load sf and tidyverse pacages into R environment.\n\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#st_read",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#st_read",
    "title": "Hands-on Exercise 1",
    "section": "st_read",
    "text": "st_read\nUsage of st_read: To import geospatial data into R.\nThings to note: for st_read, you dont have to mention the filename extension\nImporting polygon feature data in Shapefile into R:\n\nmpsz = st_read(dsn = \"../../data/Week1/geospatial\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\kllygh\\IS415-GAA\\data\\Week1\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nImporting polyline feature data in shapefile form into R:\n\ncyclingpath = st_read(dsn = \"../../data/Week1/geospatial\", \n                         layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\kllygh\\IS415-GAA\\data\\Week1\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 2558 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nImporting GIS data from KML file into R:\n\npreschool = st_read(\"../../data/Week1/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\kllygh\\IS415-GAA\\data\\Week1\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#understanding-the-difference-between-esri-shapefile-and-kml",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#understanding-the-difference-between-esri-shapefile-and-kml",
    "title": "Hands-on Exercise 1",
    "section": "Understanding the difference between ESRI Shapefile and KML",
    "text": "Understanding the difference between ESRI Shapefile and KML\nKML (Keyhole Markup Language) and Shapefile are both file formats used for storing and exchanging geospatial data, but they have some key differences in terms of structure, capabilities, and use cases.\nHere’s a comparison between KML and Shapefile:\n\nFile Format and Structure:\n\nKML: KML is an XML-based file format. It uses tags and attributes to represent geographic features, attributes, and styling information. KML files are human-readable and can be easily edited with a text editor. They are well-suited for representing geographic data in a hierarchical and descriptive manner.\nShapefile: A Shapefile is a set of files with different extensions (.shp, .shx, .dbf, .prj, etc.) that collectively store both spatial and attribute data. The .shp file contains geometric data, while the .dbf file stores attribute data in a tabular format. The shapefile format is more structured and relies on binary files for geometry.\n\nGeometry Types:\n\nKML: Supports points, lines, polygons, 3D models, and other geometries. It is versatile and can represent both 2D and 3D spatial features.\nShapefile: Supports points, lines, and polygons, but does not inherently support 3D geometries. It’s primarily used for 2D vector data.\n\nAttributes and Database:\n\nKML: Attributes are included within the KML file itself, typically in a  element or as attributes of specific features. The structure is less rigid, and attributes can be added flexibly.\nShapefile: Attribute data is stored in a separate .dbf file. The tabular structure allows for a more organized representation of attribute information.\n\nStyling and Visualization:\n\nKML: Provides rich styling options, allowing users to define colors, icons, labels, and other visual attributes for individual features. Styling information is often embedded within the KML file.\nShapefile: Styling is typically handled by the GIS software reading the shapefile. The shapefile format itself does not store styling information.\n\nSoftware Compatibility:\n\nKML: Widely supported by various mapping and GIS applications, including Google Earth and Google Maps. Many GIS software packages can import and export KML files.\nShapefile: A widely supported format in the GIS community. Most GIS software, including ESRI’s ArcGIS, QGIS, and others, can read and write shapefiles.\n\nUse Cases:\n\nKML: Often used for visualizing and sharing geographic data on online platforms, virtual globes, and web mapping applications. Suitable for applications where human-readable representation is important.\nShapefile: Commonly used for more complex GIS workflows, analysis, and data storage. It is a well-established format in the GIS community and is suitable for a wide range of applications.\n\n\nUltimately, the choice between KML and Shapefile depends on the specific requirements of a given project and the tools and applications you plan to use. Each format has its strengths and is better suited to certain use cases."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#st_geometry",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#st_geometry",
    "title": "Hands-on Exercise 1",
    "section": "st_geometry()",
    "text": "st_geometry()\nUsage: This function is often used to retrieve the actual point, line, or polygon coordinates from a spatial dataset.\nIn the context of R programming and spatial data analysis, sf_object typically refers to an object created using the sf package, which is specifically designed for handling spatial data in the form of simple features. The sf package provides a framework for representing and manipulating spatial vector data.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#glimpse",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#glimpse",
    "title": "Hands-on Exercise 1",
    "section": "glimpse()",
    "text": "glimpse()\nUsage: glimpse() is a function provided by the dplyr package, which is part of the tidyverse collection of R packages. The glimpse() function is used for printing a concise summary of a data frame or tibble, including information about the data types of columns and a preview of the first few rows of the data.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#plotting-geospatial-maps",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#plotting-geospatial-maps",
    "title": "Hands-on Exercise 1",
    "section": "Plotting geospatial maps",
    "text": "Plotting geospatial maps\n\nplot(mpsz)\n\n\n\n\n\n\n\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#st_crs",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#st_crs",
    "title": "Hands-on Exercise 1",
    "section": "st_crs()",
    "text": "st_crs()\nUsage: This function is used to extract the CRS information from an sf object.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#projection-transformation",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#projection-transformation",
    "title": "Hands-on Exercise 1",
    "section": "Projection transformation",
    "text": "Projection transformation\nUsage: Projection transformation, often simply referred to as “projection,” is a process used in cartography (the study and practice of map-making) and Geographic Information Systems (GIS) to convert spatial data from one coordinate reference system to another. This transformation is necessary when data collected or represented in one coordinate system needs to be displayed or analyzed in a different coordinate system.\n\nst_crs()\nUsage: This function is used to extract the CRS information from an sf object.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\n\nst_set_crs()\nUsage: To assign the correct EPSG code to mpsz data frame, st_set_crs() of sf package is used as shown in the code chunk below. when you want to update the CRS metadata associated with an sf object without transforming the actual coordinates. This is useful when you know that the object is in a different CRS than the metadata suggests.\n\nYou use st_set_crs() when you want to assign or update the CRS of an sf object. This function does not perform any geometric transformation; it only updates the metadata associated with the object to indicate the new CRS.\n\n\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\n\n\nst_transform()\nUsage: when you want to transform the spatial coordinates of an sf object from one CRS to another. This is necessary when you have spatial data in one CRS, but you need to work with it in a different CRS.\n\nYou use st_transform() when you want to actually change the coordinates of the geometries to be consistent with a different CRS. This involves a mathematical transformation of the spatial features.\n\n\npreschool3414 &lt;- st_transform(preschool, \n                              crs = 3414)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#glimpse-dplyr-package",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#glimpse-dplyr-package",
    "title": "Hands-on Exercise 1",
    "section": "glimpse() dplyr package",
    "text": "glimpse() dplyr package\nUsage: glimpse() is a function provided by the dplyr package, which is part of the tidyverse collection of R packages. The glimpse() function is used for printing a concise summary of a data frame or tibble, including information about the data types of columns and a preview of the first few rows of the data.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#read_csv-from-readr-package",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#read_csv-from-readr-package",
    "title": "Hands-on Exercise 1",
    "section": "read_csv() from readr package",
    "text": "read_csv() from readr package\nUsage: primary purpose is to read tabular data from CSV (Comma-Separated Values) files. CSV files are a common format for storing tabular data, and they can be used for both spatial and non-spatial datasets.\nThings to note: When providing the path here, include the filename and the file extension.\n\nlistings &lt;- read_csv(\"../../data/Week1/aspatial/listings.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#list-of-base-r",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#list-of-base-r",
    "title": "Hands-on Exercise 1",
    "section": "list() of base R",
    "text": "list() of base R\nUsage: is a base R function used to create a list object. Lists in R can contain elements of different types, such as vectors, data frames, functions, or even other lists. It is a fundamental data structure in R for organizing and storing heterogeneous data.\n\nlist(listings) \n\n[[1]]\n# A tibble: 3,457 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Villa in…  367042 Belinda   East Region         Tampines          1.35\n 2  71896 Home in …  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Home in …  367042 Belinda   East Region         Tampines          1.35\n 4 275343 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Home in …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 Rental u… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Rental u… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 369141 Place to… 1521514 Elizabeth Central Region      Newton            1.31\n# ℹ 3,447 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\nWhen to use list() and glimpse()?\n\nUse glimpse() when you want to inspect the structure of a data frame or tibble.\nUse list() when you want to create a list to organize and store different types of elements."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "title": "Hands-on Exercise 1",
    "section": "Creating a simple feature data frame from an aspatial data frame",
    "text": "Creating a simple feature data frame from an aspatial data frame\n\nst_as_sf() sf package\n\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\nglimpse(listings_sf)\n\nRows: 3,457\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Villa in Singapore · ★4.44 · 2 bedroom…\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; 150, 80, 80, 64, 78, 220, 85, 75, 69, 7…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 92, 60, 60, 92,…\n$ number_of_reviews              &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 131, 17, 5, 81,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.13, 0.16, 0.30, 0.15, 0.11, 0.09, 0.9…\n$ calculated_host_listings_count &lt;dbl&gt; 5, 5, 5, 51, 51, 5, 7, 51, 51, 7, 7, 1,…\n$ availability_365               &lt;dbl&gt; 55, 91, 91, 183, 183, 54, 365, 183, 183…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 3, 0, 0, 1, 2, 0, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#buffer",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#buffer",
    "title": "Hands-on Exercise 1",
    "section": "Buffer",
    "text": "Buffer\nDefinition: A buffer in GIS is a defined zone or area created around or within a geographic feature such as a point, line, or polygon.\nWhy do we use buffer?\n\nBuffers help answer questions like “What are the features within a certain distance from a given point?”\n“How many road segments intersect a specific buffer zone?”\nBuffering can also be used to identify if a geographic feature is found within proximity to another geographic feature\na business may use buffering along with census data to see the demographics of customers that live within a certain distance of their store.\n\n\nst_buffer()\n\nbuffer_cycling &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\n\n\nst_area()\nExplanation of the code below: This code is using the sf (Simple Features) package in R to calculate and add a new column named AREA to a spatial object named buffer_cycling. The AREA column will store the calculated areas of each geometry in the buffer_cycling object.\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\n\n\nsum()\nTo calculate the total land involved\n\nsum(buffer_cycling$AREA)\n\n1774367 [m^2]"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#point-in-polygon-count",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_EX1.html#point-in-polygon-count",
    "title": "Hands-on Exercise 1",
    "section": "Point-in-polygon count",
    "text": "Point-in-polygon count\n\nExample 1\n\nlength() and st_intersects()\nst_intersects(x, y, sparse = FALSE, …) && intersects_result &lt;- st_intersects(points, polygon)\n\nx and y: The sf objects for which intersection is being tested. These can be simple features (points, lines, polygons, etc.) or geometries.\nsparse: A logical parameter indicating whether to use a sparse matrix representation for the result. If sparse is set to TRUE, the result will be a sparse matrix.\n\n\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))\n\n\n\nSummary()\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\n\n\ntop_n()\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\n\n\n\nExample 2\n\nst_area() and mutate()\nThings to note:\n\nmpsz3414 %&gt;% st_area() is equivalent to st_area(mpsz3414).\n\nExplanation of the code:\n\nmutate(): This function is from the dplyr package and is used for creating or modifying columns in a data frame. It allows you to add new columns or modify existing ones based on specified calculations.\nmpsz3414 %&gt;% ...: The pipe operator (%&gt;%) is used to pass the mpsz3414 data frame to the subsequent mutate() function. This creates a readable and sequential flow of operations.\ndf &lt;- df %&gt;% mutate(Doubled = Value * 2)\n\n\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  }
]